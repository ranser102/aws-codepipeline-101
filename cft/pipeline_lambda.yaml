---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Cloudformation template to provision AWS codepipeline

Parameters:
  SourceCodeBucket:
    Description: The S3 bucket name that contain the source code
    Type: String
    Default: learning-circle-source-code

Resources:
  MyCodePipeline: 
    Type: 'AWS::CodePipeline::Pipeline'
    Properties: 
      Name: my-first-codepipeline
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/delegate-admin-codepipeline-role'
      ArtifactStore:
        Type: S3
        Location: 'arn:aws:s3:::learning-circle-source-code'
      Stages:

        - Name: MySourceStage
          Actions: 
          - RunOrder: 1
            OutputArtifacts:
              - Name: S3SourceArtifact
            ActionTypeId:
              Provider: S3
              Owner: AWS
              Version: '1'
              Category: Source
            Region: us-east-1
            Name: S3SourceAction
            Configuration:
              S3Bucket: !Sub ${SourceCodeBucket}  ### Created by prepare.sh
              S3ObjectKey: learning-circle-app.zip  ### Created by prepare.sh
            InputArtifacts: []

          Name: MyBuildStage
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                ProjectName: !Ref MyBuildProject
                PrimarySource: MyApplicationSource1
              OutputArtifacts:
                - Name: MyPipelineBuildArtifact
              InputArtifacts:
                - Name: S3SourceArtifact

          Name: MyApprovalStage
          Actions:
            - Name: ApprovalAction
              ActionTypeId: 
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
  
          Name: MyDeployStage
          Actions:
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              RunOrder: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: pipeline-changeset
                RoleArn: 
                  Fn::GetAtt: CloudFormationServiceRole.Arn
                StackName: my-project-lambda
                TemplateConfiguration: 'MyPipeline-BuildArtifact::template-configuration.json'
                TemplatePath: 'MyPipeline-BuildArtifact::template-export.yml'
              OutputArtifacts: []
              InputArtifacts:
                - Name: MyPipelineBuildArtifact  

  MyBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
      ServiceRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/delegate-admin-codebuild-role'
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                java: corretto11
            build:
              commands:
                - echo "=======================Start-Build============================="
                - cd aws-lambda-101/HelloWorldFunction
                - pwd ; ls -alrt
                - echo "=======================End-Build============================="

### IAM ###
# Pipeline service-role and build service-role already exists in the account
# Below are the cloudformation service-role and the lambda execution-role used to deploy the SAM app

  CloudFormationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: delegate-admin-cf-lc-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:aws:iam::${AWS::AccountId}:policy/cft-developer-iam-access-policy
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/cft-developer-boundary-policy
      Policies:
        - PolicyName: CloudFormationPolicy-Inline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - Fn::Sub: arn:aws:s3:::gitlab-custom-source-artifactstore-${AWS::AccountId}/*
              - Effect: Allow
                Action:
                  - lambda:*
                Resource:
                  - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
              - Effect: Allow
                Action:
                  - lambda:GetEventSourceMapping
                  - lambda:CreateEventSourceMapping
                  - lambda:DeleteEventSourceMapping
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource:
                  - Fn::Sub: arn:aws:apigateway:${AWS::Region}::*
              - Effect: Allow
                Action:
                  - sns:*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - sqs:*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:PutRolePolicy
                Resource:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/*
              - Effect: Allow
                Action:
                  - iam:AttachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                Resource:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                Resource:
                  - Fn::Sub: arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
                  - Fn::Sub: arn:aws:cloudformation:${AWS::Region}:aws:transform/Include
              - Effect: Allow
                Action:
                  - codedeploy:CreateApplication
                  - codedeploy:DeleteApplication
                  - codedeploy:RegisterApplicationRevision
                Resource:
                  - Fn::Sub: arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:*
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeploymentGroup
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                Resource:
                  - Fn::Sub: arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:*
              - Effect: Allow
                Action:
                  - codedeploy:GetDeploymentConfig
                Resource:
                  - Fn::Sub: arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub delegate-admin-lambda-lc-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub arn:aws:iam::${AWS::AccountId}:policy/cft-developer-iam-access-policy
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/cft-developer-boundary-policy
      Policies:
      - PolicyName: logAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*




                




